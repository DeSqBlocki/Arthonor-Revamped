const Discord = require('discord.js');
const config = require('./config.json');
const client = new Discord.Client();
const prefix = '$';

const fs = require('fs');
const { waitForDebugger } = require('inspector');
const { exit } = require('process');
const { Console } = require('console');
const userData = JSON.parse(fs.readFileSync('Storage/userData.json', 'utf8'));
const birthdays = JSON.parse(fs.readFileSync('Storage/birthdays.json', 'utf8'));
const nutCooldown = new Set();


client.commands = new Discord.Collection();

const commandFiles = fs.readdirSync('./commands/').filter(file => file.endsWith('.js'));
for(const file of commandFiles){
  const command = require(`./commands/${file}`);

  client.commands.set(command.name, command);
}

client.on('ready', () =>{
  console.log('Starting Bot. . .\r\n');
  client.user.setActivity("Red Dead Depression", {
    type: "STREAMING",
    url: "https://www.twitch.tv/desq_blocki",
  });
  nutCooldown.clear();
  console.log(nutCooldown)
  var currentdate = new Date();
  var bdaycheck = currentdate.getDate() + '.' + (currentdate.getMonth()+1) + '.';
  var key, count = 0;
  for(key in birthdays.geburtstage){
    count++;
  };
  var i = 0;
  var chek = 0;
  var bdid = 0;
  do {
    if(birthdays.geburtstage[i].bday === bdaycheck){
      chek = 1;
      bdid = i;
    }
    i++;
  } while (i != count);
  if (chek == 1){
    console.log('Heute ist ein Geburtstag! ' + bdaycheck + '\r\n');
      // const guild = client.guilds.cache.get("353902391021535242");
      // const role = guild.roles.cache.get('400722216028733444');
      // const bduser = birthdays.geburtstage[bdid].id
      // const member = guild.members.fetch(`${bduser}`)
      //   .then(console.log)
      //   .catch(console.error);
    const channel = client.channels.cache.find(channel => channel.name === 'hermeskammer')
    channel.send(`<@${birthdays.geburtstage[bdid].id}> hat heute Geburtstag`);
  } else {
    console.log('Heute ist kein Geburtstag! ' + bdaycheck + '\r\n');
  }
  //BDAYCHECKER


  console.log('HonorCounter is ready!');
  //Confirms if ready

});
//CLIENT ON/OFF

client.on('guildMemberAdd', member =>{
  const channel = client.channels.cache.find(channel => channel.name === 'hermeskammer')
  channel.send('Willkommen auf dem Olymp, <@' +member.user+ '>! Bitte werf einen Blick auf <#455023824791011338>')
  console.log(member.user.username + ' joined');
  member.roles.add('400722216028733444')

});

client.on('guildMemberRemove', guildMemberRemove =>{
  console.log(guildMemberRemove.user.username + ' left');
});

client.on('message', message =>{
  if(!message.content.startsWith(prefix) || message.author.bot) return;
  const args = message.content.slice(prefix.length).split(/ +/);
  const command = args.shift().toLowerCase();
  function getUserFromMention(mention) {
    if (!mention) return;
  
    if (mention.startsWith('<@') && mention.endsWith('>')) {
      mention = mention.slice(2, -1);
  
      if (mention.startsWith('!')) {
        mention = mention.slice(1);
      }
  
      return client.users.cache.get(mention);
    }
  }
  //COMMAND: UPDATEPROFILES
  if (command === 'updateprofiles'){
    var arr = []
    var a = 0;

    while(a != userData.Honor.length){
      if(!userData.Honor[a].nuts){
        userData.Honor[a].nuts = 0
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }
      if(!userData.Honor[a].honors){
        userData.Honor[a].honors = 0
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }
      if(!userData.Honor[a].reason){
        userData.Honor[a].reason = "."
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }
    }

    arr[0] = '=============================='
    arr[1] = '==={id,honors,reason,nuts}===='
    arr[2] = '=============================='
    arr[3] = 'All Profiles Have Been Updated'

    const embed = new Discord.MessageEmbed()
    .setAuthor(`Update All Profiles`)
    .setColor(0x51267)
    .addFields({ name: 'Top 5:', value: arr, inline: true });
  return message.channel.send(embed);
  }
  //COMMAND: NUTSLB
  if (command === 'nutslb'){
    var i = 0;
    var sorter = [];
    var element

    while (i != userData.Honor.length){
      element = userData.Honor[i].nuts
      sorter.push(element);
      sorter.sort(function(a, b) {
        return b - a;
      });
      i++;
    }
    console.log(sorter);
    var i = 0;
    var a = 0;
    var z = [];

    while (i < 5){
      //Top 5 Werte
      while(a != userData.Honor.length){
        if(!userData.Honor[a].nuts){
          userData.Honor[a].nuts = 0
          fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
          if (err) console.error(err)
          });
        }
        //DB durchsuchen
        if(userData.Honor[a].nuts === sorter[i]){
          //ID merken, erstmal in console
          if(!z.includes(`<@${userData.Honor[a].id}> : ${userData.Honor[a].nuts} Nuts`, 0)){
            //Duplicates suchen
            z[i] = `<@${userData.Honor[a].id}> : ${userData.Honor[a].nuts} Nuts`;
          }
        }
        a++;
      }
      a = 0;
      i++;
    } 
    const embed = new Discord.MessageEmbed()
      .setAuthor(`Honor Leaderboard!`)
      .setColor(0x51267)
      .addFields({ name: 'Top 5:', value: z, inline: true });
    message.channel.send(embed);
  }
  //COMMAND: TIMER
  if (command === 'timer'){
    var newUser = getUserFromMention(args[0])
    var time
    var ntime
    var extra
    
    if (!newUser){
      newUser = message.author
      time = args[0]
      extra = args[1]
    } else {
      time = args[1]
      extra = args[2]
    }
    if (!time){
      return message.channel.send('Du hast keine Zeit angegeben!')
    } else {
        if (extra == 'Sekunden' || extra == 'Sekunde' || extra == 's' ){
          //Sec to MS
          ntime = time * 1000
        } else if (extra == 'Minuten' || extra == 'Minute' || extra == 'min' ){
          //Min to MS
          ntime = time * 60000
        } else if (extra == 'Stunden' || extra == 'Stunde' || extra == 'h' ){
          //H to MS
          ntime = time * 3600000
        } else if(!extra){
          //default: Sec
          ntime = time * 1000
          extra = 'Sekunden'
        } else {
          return message.channel.send('unknown statement')
        }
        var timerMessage
        var caseswitch = Math.floor(Math.random() * 2)
        console.log(caseswitch)
        switch (caseswitch) {
          case 0:
            timerMessage = `${newUser}, ${time} ${extra} sind um! Erinnere mich nochmal, woran ich dich erinnern sollte...`
            break;
          case 1:
            timerMessage =  `${newUser}, ${time} ${extra} sind um! Oh guck mal, da war eine Nuss im Timer :0`
            var check = 0
            var uid = 0
            var i = 0
        
            do {
              if(userData.Honor[i].id === newUser.id) {
                check = 1;
                uid = i;
              }
              i++;
            } while (i != userData.Honor.length)
        
            if (!userData.Honor[uid].nuts){
              const input = {
                id: newUser.id,
                honors: 0,
                reason: ".",
                nuts: 0
              }
              userData.Honor.push(input)
            } else {
              userData.Honor[uid].nuts++
            }
            fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
            if (err) console.error(err)
            });
            break;
          case 2:
            timerMessage =  `${newUser}, ${time} ${extra} sind um!`
            break;   
          default:
            timerMessage = `${newUser}, ${time} ${extra} sind um! Erinnere mich nochmal, woran ich dich erinnern sollte...`
            break;
        }
          message.channel.send(`${newUser.username} wird in ${time} ${extra} erinnert`)
          setTimeout(() => {
            message.channel.send(timerMessage)
          }, ntime)
    
          if (caseswitch == 2) {
            setTimeout(() =>{
            message.channel.send(`Ich bin ${newUser.username} und ich bin nicht lustig :D`)
            }, 10000)
          }
    }
    

  }
  //COMMAND: CHECKNUTS
  if (command === 'checknuts'){
    var newUser = getUserFromMention(args[0])
    if (!newUser){
      newUser = message.author
    }

    var check = 0
    var uid = 0
    var i = 0

    do {
      if(userData.Honor[i].id === newUser.id) {
        check = 1;
        uid = i;
      }
      i++;
    } while (i != userData.Honor.length)

    if (check == 1){
      //data does exist
      if (!userData.Honor[uid].nuts){
        //data exists, but not updated yet
        userData.Honor[uid].nuts = 0;
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }

      if (userData.Honor[uid].nuts > 0){
        message.channel.send(`${newUser} hat bereits **${userData.Honor[uid].nuts}** Nüsse gesammelt!`);
      } else {
        message.channel.send(`${newUser} hat noch keine Nüsse gesammelt! >:(`);
      }
      
    } else {
      //data does not exist
      message.channel.send(`${newUser} hat noch keine Nüsse gesammelt! >:(`);

        const input = {
          id: newUser.id,
          honors: 0,
          reason: ".",
          nuts: 0
        }
        userData.Honor.push(input);
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }
  }
  //COMMAND: NUTS
  if (command === 'nuts'){
    if (nutCooldown.has(message.author.id)) {
      message.channel.send('Du hast zu schnell genutted! >:(')
    } else {
      var check = 0
      var uid = 0
      var i = 0

      do {
        if(userData.Honor[i].id === message.author.id) {
          check = 1;
          uid = i;
        }
        i++;
      } while (i != userData.Honor.length)

      var value = Math.floor(Math.random() * 10)

      if(value == 1) {
        //Singular
        message.reply('Du hast eine Nuss bekommen! <:chestnut:829906666551902238>')
      } else if (value > 0) {
        //Plural
        message.reply(`Du hast ${value} Nüsse bekommen! <:chestnut:829906666551902238>`)
      } else {
        //Nichts
        message.reply('Du hast keine Nuss bekommen! <:shooketh_yeesh:808577698271199272>')
      }
      console.log(`random: ${value}`)
      
      if (check == 1){
        //data does exist
        if (!userData.Honor[uid].nuts){
          message.channel.send('Deus Nut! Du bekommst eine Bonus Nuss zum ersten Mal. <:DeusNut:829395908067328031>')
          value++;
          userData.Honor[uid].nuts = value
        } else {
          userData.Honor[uid].nuts += value
        }
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });

      } else {
        //data does not exist
          message.channel.send('Deus Nut! Du bekommst eine Bonus Nuss zum ersten Mal. <:DeusNut:829395908067328031>') //<:Honor2:748242575701311530>
          value++;

          const input = {
            id: newUser.id,
            honors: 0,
            reason: ".",
            nuts: 0 + value
          }
          userData.Honor.push(input);
          fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
          if (err) console.error(err)
          });
      }

      nutCooldown.add(message.author.id);
      setTimeout(() => {
        nutCooldown.delete(message.author.id);
      }, 3600000)
      console.log(nutCooldown)
    }
  }
  //COMMAND: LEADERBOARD
  if (command === 'lb'){
    var i = 0;
    var sorter = [];
    var element

    while (i != userData.Honor.length){
      element = userData.Honor[i].honors
      sorter.push(element);
      sorter.sort(function(a, b) {
        return b - a;
      });
      i++;
    }
    console.log(sorter);
    var i = 0;
    var a = 0;
    var z = [];

    while (i < 5){
      //Top 5 Werte
      while(a != userData.Honor.length){
        //DB durchsuchen
        if(userData.Honor[a].honors === sorter[i]){
          //ID merken, erstmal in console
          if(!z.includes(`<@${userData.Honor[a].id}> : ${userData.Honor[a].honors} Honors`, 0)){
            //Duplicates suchen
            z[i] = `<@${userData.Honor[a].id}> : ${userData.Honor[a].honors} Honors`;
          }
        }
        a++;
      }
      a = 0;
      i++;
    } 
    const embed = new Discord.MessageEmbed()
      .setAuthor(`Honor Leaderboard!`)
      .setColor(0x51267)
      .addFields({ name: 'Top 5:', value: z, inline: true });
    message.channel.send(embed);
  }

  //COMMAND: SETBDAY
  if (command == 'setbday'){
    if(message.author.id === '140508899064283136'){
      var user = getUserFromMention(args[0]);
      var date = args[1];
      if (!user || !date){
        return message.channel.send('Missing Arguments!');
      } else {
        var key, count = 0;
        for(key in birthdays.geburtstage){
          count++;
        };

        var i = 0;
        var checker = 0;
        do {
          if(user.id == birthdays.geburtstage[i].id){
            checker = 1;
         } 
         i++;
        } while (i != count);
        if (checker == 0){
          const input = {
            id: user.id,
            bday: args[1],
          }

          birthdays.geburtstage.push(input);
          fs.writeFile('Storage/birthdays.json', JSON.stringify(birthdays), (err) =>{
          if (err) console.error(err)
            });
        } else {
          return message.channel.send(`${user} is already in my database!`);
        }
      }
    } else {
      return message.reply('You are not authorized to use this command! >:(');
    }
  }
  //COMMAND: LUV
  if (command == 'luv') {
    const user = getUserFromMention(args[0]);
    var luvgifs = [
      "https://giphy.com/embed/M90mJvfWfd5mbUuULX",
      "https://giphy.com/embed/hVle3v01CScLyGRe0i",
      "https://giphy.com/embed/TdL0bbk08WP2S0RMnX",
      "https://giphy.com/embed/eiRpSPB8OSGVcbkOIJ",
      "https://giphy.com/embed/ifB1v1W3Db0GIW7uTA",
      "https://giphy.com/embed/yc2pHdAoxVOrJ2m5Ha",
      "https://giphy.com/embed/Tia2InBEWaQgckP3UG",
      "https://giphy.com/embed/l41JWw65TcBGjPpRK",
      "https://giphy.com/embed/M8o1MOwcwsWOmueqN4",
      "https://giphy.com/embed/L4UOYLu2quhaRqrTDI",
      "https://giphy.com/embed/4N1wOi78ZGzSB6H7vK",
      "https://giphy.com/embed/RkbLjHIVtiJYyHnHvB",
      "https://giphy.com/embed/l4pTdcifPZLpDjL1e",
      "https://giphy.com/embed/WOrZJR85BBDyhahWsX",

    ];
    const gif = luvgifs[Math.floor(Math.random() * luvgifs.length)];
    if (!user) {
      return message.reply('Ich sehe, dass du Liebe vergeben willst, aber wen willst du den lieb haben?');
    } else {
      message.channel.send(`<@${message.author.id}> gibt luv an <@${message.mentions.users.first().id}>`);
      console.log(gif);
      return message.channel.send(gif);
    
    }
    
  }
  //COMMAND: 8BALL
  if (command == '8ball') {
    if(args == ''){
      return message.channel.send('Stell mir doch bitte eine Frage, ich kann immerhin keine Gedanken lesen...unless? ;)');
    } else {
    const random = Math.floor(Math.random() * 20);
    console.log(random);
    if (random == 0){
      //Positive Antworten
      return message.channel.send('Absolut, so wie die Authorität unserer Göttin!');
    } else if (random == 1){
      return message.channel.send('Unterschätze es nicht, genauso wie Roberts sexual frustration');
    } else if (random == 2){
      return message.channel.send('Ich zedaz so');
    } else if (random == 3){
      return message.channel.send('Ohne Zweifel');
    } else if (random == 4){
      return message.channel.send('Definitiv, Alter');
    } else if (random == 5){
      return message.channel.send('Microsoft Outlook gut');
    } else if (random == 6){
      return message.channel.send('Das Sternzeichen von Yeesh leuchtet heute stark dafür');
    } else if (random == 7){
      return message.channel.send('Mit "Support-Desk am Freitagabend" - Wahrscheinlichkeit');
    } else if (random == 8){
      return message.channel.send('Ist die Nase von Julius wunderschön und lang?');
    } else if (random == 9){
      return message.channel.send('So wahr wie Laviis Zeichnkünste');
      //Neutrale Antworten
    } else if (random == 10){
      return message.channel.send('nein...ja... vielleicht?');
    } else if (random == 11){
      return message.channel.send('Frag mich nachher nochmal');
    } else if (random == 12){
      return message.channel.send('Die Kalkulationen sind leicht off, ich aber nicht ;)');
    } else if (random == 13){
      return message.channel.send('Ich sag es dir ein ander Mal');
    } else if (random == 14){
      return message.channel.send('Ohne schwere Zeiten, würden wir die guten Zeiten nie schätzen');
      //Negative Antworten
    } else if (random == 15){
      return message.channel.send('Genauso schlecht wie eine Ketzerei gegen den Olymp');
    } else if (random == 16){
      return message.channel.send('Hat der Fuchs uns jemals verraten?...**hust**');
    } else if (random == 17){
      return message.channel.send('Mein Outlook ist abgeschmiert, mist');
    } else if (random == 18){
      return message.channel.send('Ich bezweifle es. A propos, zweifel nicht an den Götter und ihren Priester!');
    } else if (random == 19){
      return message.channel.send('Meine Quellen sagen.... WARNUNG! Artikel 17: Die betroffene Person hat das Recht, von dem Verantwortlichen zu verlangen, dass sie betreffende personenbezogene Daten unverzüglich gelöscht werden, und der Verantwortliche ist verpflichtet, personenbezogene Daten unverzüglich zu löschen, sofern einer der folgenden Gründe zutrifft **ERROR ERROR ERROR**?');
    } else {
      return;
    }
    }
  }
  //COMMAND: DOGGO
  if (command == 'doggo') {
    if (message.author.id == '353902552888377346') {
      const attachment = new Discord.MessageAttachment('assets/doggo.jpg', 'doggo.jpg');


      message.channel.send({
          embed: {
              files: [
                  attachment
              ],
              image: {
                  url: 'attachment://doggo.jpg'
              }
          }
      });
    var text = [
      'Ich habe dich vermisst, woof!',
      'Lass uns spielen!',
      'Denk dran, ich werde immer hier sein.',
      'Du hast gerufen, Herrchen?',
      'Depression, WO?! Ich belle sie weg.',
    ]
    let myText = text[Math.floor(Math.random()* text.length)]
    message.channel.send(myText);
    } else {
      return message.reply('Du bist nicht mein Herrchen! >:(')
    }
  }
  //COMMAND: PET
  if (command == 'pet') {
    if (message.author.id == '353902552888377346') {
      const attachment = new Discord.MessageAttachment('assets/doggo.jpg', 'doggo.jpg');


      message.channel.send({
          embed: {
              files: [
                  attachment
              ],
              image: {
                  url: 'attachment://doggo.jpg'
              }
          }
      });
      var petText = [
        '*loving growl*',
        'Danke, das habe ich gebraucht.',
        'Ein bisschen tiefer.',
        'Ja, genau dort!'
      ]
    let myPetText = petText[Math.floor(Math.random()* petText.length)]
    message.channel.send(myPetText);
    } else {
      return message.reply('Du bist nicht mein Herrchen! >:(')
    }
  }
  //COMMAND: STATUS
  if (command == 'status'){
    if (message.author.id == '140508899064283136'){
      return message.channel.send('I am alive, father :D');
    } else {
      return message.channel.send("I am online");
    }

  }
  //COMMAND: AVATAR
  if (command == 'avatar'){
    if (args[0]) {
      const user = getUserFromMention(args[0]);
      if (!user) {
        return message.reply('Please use a proper mention if you want to see someone else\'s avatar.');
      }//Should return a text, when you don't mention someone
  
      return message.channel.send(`${user.username}'s avatar: ${user.displayAvatarURL({ dynamic: true })}`);
    }
  
    return message.channel.send(`${message.author.username}, your avatar: ${message.author.displayAvatarURL({ dynamic: true })}`);
  }
  //COMMAND: PING
  if(command === 'ping'){
      client.commands.get('ping').execute(message, args);
      //ping - pong, easy as that
  } 
  //COMMAND: AUTHOR
  if (command === 'author'){
      client.commands.get('author').execute(message, args);
      //gives credit to author
  }
  //COMMAND: HELP
  if (command === 'help'){
      client.commands.get('help').execute(message, args);
      //help menu with a list of all commands
  }
  //COMMAND: TEST [REDACTED]
  if (command === 'test'){
      client.commands.get('test').execute(message, args);
      //test command, please ignore
  }
  //COMMAND: HONORHISTORY
  if (command === 'honorhistory'){
    if (message.member.hasPermission("VIEW_AUDIT_LOG")){
      const newUser = getUserFromMention(args[0])
      if (!newUser){
        return message.reply('Missing Argument')
      }
      var check = 0;
      var uid = 0
      var i = 0

      do {
        if(userData.Honor[i].id === message.mentions.users.first().id) {
          uid = i;
          check = 1;
        }
        i++;
      } while (i != userData.Honor.length)

      if (check == 1){
        if(!userData.Honor[uid].reason){
          userData.Honor[uid].reason = "."
        }
        var str = userData.Honor[uid].reason
        const embed = new Discord.MessageEmbed()
        .setAuthor(`Honor History!`)
        .setColor(0x51267)
        .addFields({ name: 'reasons:', value: "" + str, inline: true });
        message.channel.send(embed)

      } else {
        userData.Honor[uid].reason = " "
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }

    } else {
      message.channel.send('You do not have the required permissions to use this command')
    }
  }
  //COMMAND: DISHONOR
  if (command === 'dishonor'){
    if (message.member.hasPermission("VIEW_AUDIT_LOG")){
    const newUser = getUserFromMention(args[0])
    const reason = args[1]
    if (!newUser || !reason){
      return message.reply('Missing Argument')
    }

    var check = 0
    var uid = 0
    var i = 0

    do {
      if(userData.Honor[i].id === message.mentions.users.first().id) {
        check = 1;
        uid = i;
      }
      i++;
    } while (i != userData.Honor.length)

    if (check == 1){
      //data does exist
      if(userData.Honor[uid].honors > -20) {
        userData.Honor[uid].honors--
        userData.Honor[uid].reason += ', ' + reason

        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      } else {
        return message.channel.send(`<@${message.author.id}> tried to dishonor <@${message.mentions.users.first().id}>, but they are at Max Dishonor Level! <:Honor2:748242575701311530><:Honor2:748242575701311530><:Honor2:748242575701311530>`)
      }
    } else { 
      //data does not exist
        const input = {
          id: newUser.id,
          honors: -1,
          reason: reason,
          nuts: 0
        }
        userData.Honor.push(input);
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }
      return message.channel.send(`<@${message.author.id}> has dishonored <@${message.mentions.users.first().id}> <:Honor2:748242575701311530>`);
    } else {
    message.channel.send('You do not have the required permissions to use this command')
    }
  }
  //COMMAND: HONOR
  if (command === 'honor'){
    if (message.member.hasPermission("VIEW_AUDIT_LOG")){
    const newUser = getUserFromMention(args[0])
    const reason = args[1]
    if (!newUser || !reason){
      return message.reply('Missing Argument')
    }

    var check = 0
    var uid = 0
    var i = 0

    do {
      if(userData.Honor[i].id === message.mentions.users.first().id) {
        check = 1;
        uid = i;
      }
      i++;
    } while (i != userData.Honor.length)

    if (check == 1){
      //data does exist
      if(userData.Honor[uid].honors < 20) {
        userData.Honor[uid].honors++
        userData.Honor[uid].reason += ', ' + reason

        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      } else {
        message.channel.send(`<@${message.author.id}> tried to honor <@${message.mentions.users.first().id}>, but they are at Max Honor Level! <:Honor1:748242575873278115> <:Honor1:748242575873278115> <:Honor1:748242575873278115>`)
      }
    } else { 
      //data does not exist
        const input = {
          id: newUser.id,
          honors: 1,
          reason: reason,
          nuts: 0
        }
        userData.Honor.push(input);
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
    }
    return message.channel.send(`<@${message.author.id}> has honored <@${message.mentions.users.first().id}> <:Honor1:748242575873278115>`);
    } else {
      message.channel.send('You do not have the required permissions to use this command')
    }
  }
  //COMMAND: CHECKHONOR
  if (command === 'checkhonor'){
    const newUser = getUserFromMention(args[0])
    if (!newUser){
      return message.reply('Missing Argument')
    }

    var check = 0
    var uid = 0
    var i = 0

    do {
      if(userData.Honor[i].id === message.mentions.users.first().id) {
        check = 1;
        uid = i;
      }
      i++;
    } while (i != userData.Honor.length)

    if (check == 1){
      //data does exist
      message.channel.send('You received **' + userData.Honor[uid].honors + '** Honors in total!');

      if(userData.Honor[uid].honors < 0) {
        message.channel.send('What happened to Loyalty?! <:Honor2:748242575701311530>')
      } else if (userData.Honor[uid].honors > 0) {
        message.channel.send('real good, boah, REAL GOOD! <:Honor1:748242575873278115>')
      } else if (userData.Honor[uid].honors === 0){
        message.channel.send('Choose a goddamn side!')
      } else if (userData.Honor[uid].honors === 20){
        message.channel.send('This User is at max Honor Level! <:Honor1:748242575873278115> <:Honor1:748242575873278115> <:Honor1:748242575873278115>')
      } else if (userData.Honor[uid].honors === -20){
        message.channel.send('This User is at max Dishonor Level! <:Honor2:748242575701311530> <:Honor2:748242575701311530> <:Honor2:748242575701311530>')
      }
    } else {
      //data does not exist
        message.channel.send('You received **0** Honors in total!');
        message.channel.send('Choose a goddamn side!');

        const input = {
          id: newUser.id,
          honors: 0,
          reason: ".",
          nuts: 0
        }
        userData.Honor.push(input);
        fs.writeFile('Storage/userData.json', JSON.stringify(userData), (err) =>{
        if (err) console.error(err)
        });
      }
  }
});


client.login(config.token);

//CODE WRITTEN BY DESQBLOCKI
//ADD ME ON DISCORD "DeSqBlocki#2568"
